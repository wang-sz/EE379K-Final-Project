#!/usr/bin/env python3
# scanner for CVE-2014-2256

import json
import threading
import subprocess
from socket import *
from queue import Queue

port_num = 102
zmap_file = 'zmap_results.csv'
zmap_hr = None
ips = {
    'open': [],
    'filtered': [],
    'closed': []
}
open_file = 'open_ips.json'
info = {
    'success': [],
    'empty': [],
    'fail': [],
    'except': []
}
vuln_file = 'vuln.json'

# zmap scan
def zmap():
    subprocess.run([
        'sudo','zmap',
        # '--probe-module=icmp_echoscan',
        '--target-port='+str(port_num),
        '--output-file='+zmap_file,
        # '--quiet',
        '--bandwidth=10M',
        '--max-runtime=100000',
        '--metadata-file=zmap_meta.json'
    ])
    with open('zmap_meta.json','r') as f:
        meta = json.load(f)
    zmap_hr = meta['success_total']/meta['total_sent']
    print(zmap_hr)

# filter for open ips
def filt_open():
    with open(zmap_file,'r') as f:
        for line in f:
            ip = line.rstrip()
            try:
                s = socket(AF_INET,SOCK_STREAM)
                s.settimeout(2)
                ret = s.connect_ex((ip,port_num))
                if ret == 0:
                    ips['open'].append(ip)
                    print('{} - open'.format(ip))
                elif ret == 11:
                    ips['filtered'].append(ip)
                    print('{} - filtered'.format(ip))
                elif ret == 111:
                    ips['closed'].append(ip)
                    print('{} - closed'.format(ip))
                else:
                    print('{} - ERROR'.format(ip))
                s.close()
            except Exception as e:
                print(str(e))
                s.close()
    with open(open_file,'w+') as f:
        json.dump({'port':port_num,'open':ips['open']},f)

# grab banner info
def banners():
    q = Queue()
    lock = threading.lock()
    def threader():
        while True:
            ip = q.get()
            grab(ip,port_num)
            q.task_done()
    def grab(ip,port):
        try:
            s = socket(AF_INET,SOCK_STREAM)
            s.settimeout(5)
            ret = s.connect_ex((ip.rstrip(),port))
            if ret == 0:
                s.sendall(b'GET / HTTP/1.1\r\n\r\n')
                ban = s.recv(4096).decode('utf-8')
                lock.acquire()
                if ban == '':
                    info['empty'].append((ip,ban))
                else:
                    info['success'].append((ip,ban))
                lock.release()
            else:
                lock.acquire()
                info['fail'].append((ip,ret))
                lock.release()
            s.close()
        except Exception as e:
            lock.acquire()
            info['except'].append((ip,str(e)))
            lock.release()
            s.close()
    for _ in range(300):
        t = threading.Thread(target=threader)
        t.daemon = True
        t.start()
    with open(open_file,'r') as f:
        ips = json.load(f)
        ips = ips['open']
        for ip in ips:
            q.put(ip.rstrip())
    q.join()

# grep banner for keywords
def grep():
    vuln = []
    for elem in info['success']:
        with open('temp.txt','w+') as f:
            f.write(elem[1])
        if subprocess.run([
            'grep','-q',
            'Siemens',
            'temp.txt'
        ]).returncode == 0:
            vuln.append(elem[0])
    subprocess.run(['rm','temp.txt'])
    with open(vuln_file,'w+') as f:
        json.dump({'vulnerable':vuln},f)

if __name__ == '__main__':
    zmap()
    filt_open()
    banners()
    grep()

# with open('zmap_results.csv','r') as f:
#     for ip in f:
#         print('\rnmap {}:102\t\r'.format(ip.rstrip()), end='', flush=True)
#         subprocess.run([
#             'sudo','nmap',
#             '-oG','temp.txt',
#             '-Pn','-sV','-v0',
#             '-script=banner',
#             '-p','102',ip.rstrip()
#         ])
#         if subprocess.run(['grep','-q','Siemens','temp.txt']).returncode == 0:
#             filt_ips += ip
#             filt_cnt += 1
